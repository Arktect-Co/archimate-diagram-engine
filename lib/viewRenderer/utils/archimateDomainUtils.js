module.exports = {
    typeToClassification: (type) => {
        switch (type) {
            case "requirement":
            case "principle":
            case "constraint":
            case "goal":
            case "outcome":
            case "driver":
            case "assessment":
            case "stakeholder":
            case "value":
            case "meaning":
                return "motivational";
            case "businesscollaboration":
            case "businessactor":
            case "businessrole":
            case "businessinterface":
            case "businessobject":
            case "representation":
            case "product":
            case "contract":
            case "applicationcomponent":
            case "applicationcollaboration":
            case "applicationinterface":
            case "dataobject":
            case "node":
            case "systemsoftware":
            case "infrastructureinterface":
            case "technologyinterface":
            case "technologycollaboration":
            case "artifact":
            case "communicationnetwork":
            case "path":
            case "device":
            case "material":
            case "facility":
            case "equipment":
            case "distributionnetwork":
            case "resource":
                return "structure";
            case "businessinteraction":
            case "businessprocess":
            case "businessfunction":
            case "businessservice":
            case "businessevent":
            case "applicationinteraction":
            case "applicationfunction":
            case "applicationservice":
            case "applicationprocess":
            case "applicationevent":
            case "infrastructurefunction":
            case "infrastructureservice":
            case "technologyfunction":
            case "technologyservice":
            case "technologyprocess":
            case "technologyinteraction":
            case "capability":
            case "courseofaction":
            case "valuestream":
                return "behaviour";
            case "plateau":
            case "workpackage":
            case "deliverable":
            case "implementationevent":
            case "gap":
                return "implementation_and_migration";
            case "note":
                return "viewelement";
            default:
                return type;
        }
    },

    typeToPureSymbol: (type) => {
        switch (type) {
            case "requirement":
            case "principle":
            case "constraint":
            case "goal":
            case "driver":
            case "assessment":
            case "plateau":
            case "workpackage":
            case "deliverable":
            case "gap":
            case "businessactor":
            case "representation":
            case "location":
            case "product":
            case "contract":
            case "value":
            case "meaning":
            case "applicationcomponent":
            case "node":
            case "systemsoftware":
            case "artifact":
            case "communicationnetwork":
            case "path":
            case "device":
            case "outcome":
            case "material":
            case "facility":
            case "equipment":
            case "distributionnetwork":
            case "courseofaction":
            case "capability":
            case "resource":
            case "valuestream":
            case "grouping":
            case "group":
                return type;
            case "stakeholder":
            case "businessrole":
                return "role";
            case "businessobject":
            case "dataobject":
                return "object";
            case "businessevent":
            case "applicationevent":
            case "technologyevent":
            case "implementationevent":
                return "event";
            case "businessfunction":
            case "applicationfunction":
            case "infrastructurefunction":
            case "technologyfunction":
                return "function";
            case "businessprocess":
            case "applicationprocess":
            case "technologyprocess":
                return "process";
            case "businessservice":
            case "applicationservice":
            case "infrastructureservice":
            case "technologyservice":
                return "domainservice";
            case "businessinterface":
            case "applicationinterface":
            case "infrastructureinterface":
            case "technologyinterface":
                return "interface";
            case "businesscollaboration":
            case "applicationcollaboration":
            case "technologycollaboration":
                return "collaboration";
            case "businessinteraction":
            case "applicationinteraction":
            case "technologyinteraction":
                return "interaction";
            default:
                return "";
        }
    }
}